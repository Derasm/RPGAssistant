//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebRPG.MVC.UserServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/ServerRPG.Model")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<WebRPG.MVC.UserServiceReference.Adventure> AdventuresField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<WebRPG.MVC.UserServiceReference.Character> CharactersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HashedPasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsGameMasterField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SaltField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<WebRPG.MVC.UserServiceReference.Adventure> Adventures {
            get {
                return this.AdventuresField;
            }
            set {
                if ((object.ReferenceEquals(this.AdventuresField, value) != true)) {
                    this.AdventuresField = value;
                    this.RaisePropertyChanged("Adventures");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<WebRPG.MVC.UserServiceReference.Character> Characters {
            get {
                return this.CharactersField;
            }
            set {
                if ((object.ReferenceEquals(this.CharactersField, value) != true)) {
                    this.CharactersField = value;
                    this.RaisePropertyChanged("Characters");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HashedPassword {
            get {
                return this.HashedPasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.HashedPasswordField, value) != true)) {
                    this.HashedPasswordField = value;
                    this.RaisePropertyChanged("HashedPassword");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsGameMaster {
            get {
                return this.IsGameMasterField;
            }
            set {
                if ((this.IsGameMasterField.Equals(value) != true)) {
                    this.IsGameMasterField = value;
                    this.RaisePropertyChanged("IsGameMaster");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Salt {
            get {
                return this.SaltField;
            }
            set {
                if ((object.ReferenceEquals(this.SaltField, value) != true)) {
                    this.SaltField = value;
                    this.RaisePropertyChanged("Salt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Adventure", Namespace="http://schemas.datacontract.org/2004/07/ServerRPG.Model")]
    [System.SerializableAttribute()]
    public partial class Adventure : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LogbookField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MaxPlayersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<WebRPG.MVC.UserServiceReference.User> PlayersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WebRPG.MVC.UserServiceReference.Rumor RumorField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Logbook {
            get {
                return this.LogbookField;
            }
            set {
                if ((object.ReferenceEquals(this.LogbookField, value) != true)) {
                    this.LogbookField = value;
                    this.RaisePropertyChanged("Logbook");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MaxPlayers {
            get {
                return this.MaxPlayersField;
            }
            set {
                if ((this.MaxPlayersField.Equals(value) != true)) {
                    this.MaxPlayersField = value;
                    this.RaisePropertyChanged("MaxPlayers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<WebRPG.MVC.UserServiceReference.User> Players {
            get {
                return this.PlayersField;
            }
            set {
                if ((object.ReferenceEquals(this.PlayersField, value) != true)) {
                    this.PlayersField = value;
                    this.RaisePropertyChanged("Players");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WebRPG.MVC.UserServiceReference.Rumor Rumor {
            get {
                return this.RumorField;
            }
            set {
                if ((object.ReferenceEquals(this.RumorField, value) != true)) {
                    this.RumorField = value;
                    this.RaisePropertyChanged("Rumor");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Character", Namespace="http://schemas.datacontract.org/2004/07/ServerRPG.Model")]
    [System.SerializableAttribute()]
    public partial class Character : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BackGroundStoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ClassField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LevelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WebRPG.MVC.UserServiceReference.User UserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BackGroundStory {
            get {
                return this.BackGroundStoryField;
            }
            set {
                if ((object.ReferenceEquals(this.BackGroundStoryField, value) != true)) {
                    this.BackGroundStoryField = value;
                    this.RaisePropertyChanged("BackGroundStory");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Class {
            get {
                return this.ClassField;
            }
            set {
                if ((object.ReferenceEquals(this.ClassField, value) != true)) {
                    this.ClassField = value;
                    this.RaisePropertyChanged("Class");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Level {
            get {
                return this.LevelField;
            }
            set {
                if ((this.LevelField.Equals(value) != true)) {
                    this.LevelField = value;
                    this.RaisePropertyChanged("Level");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WebRPG.MVC.UserServiceReference.User User {
            get {
                return this.UserField;
            }
            set {
                if ((object.ReferenceEquals(this.UserField, value) != true)) {
                    this.UserField = value;
                    this.RaisePropertyChanged("User");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((this.UserIDField.Equals(value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Rumor", Namespace="http://schemas.datacontract.org/2004/07/ServerRPG.Model")]
    [System.SerializableAttribute()]
    public partial class Rumor : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="ServerRPG.UserService", ConfigurationName="UserServiceReference.IUser")]
    public interface IUser {
        
        [System.ServiceModel.OperationContractAttribute(Action="ServerRPG.UserService/IUser/Create", ReplyAction="ServerRPG.UserService/IUser/CreateResponse")]
        void Create(WebRPG.MVC.UserServiceReference.User entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="ServerRPG.UserService/IUser/Create", ReplyAction="ServerRPG.UserService/IUser/CreateResponse")]
        System.Threading.Tasks.Task CreateAsync(WebRPG.MVC.UserServiceReference.User entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="ServerRPG.UserService/IUser/GetAll", ReplyAction="ServerRPG.UserService/IUser/GetAllResponse")]
        System.Collections.Generic.List<WebRPG.MVC.UserServiceReference.User> GetAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="ServerRPG.UserService/IUser/GetAll", ReplyAction="ServerRPG.UserService/IUser/GetAllResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WebRPG.MVC.UserServiceReference.User>> GetAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="ServerRPG.UserService/IUser/Find", ReplyAction="ServerRPG.UserService/IUser/FindResponse")]
        WebRPG.MVC.UserServiceReference.User Find(string searcher);
        
        [System.ServiceModel.OperationContractAttribute(Action="ServerRPG.UserService/IUser/Find", ReplyAction="ServerRPG.UserService/IUser/FindResponse")]
        System.Threading.Tasks.Task<WebRPG.MVC.UserServiceReference.User> FindAsync(string searcher);
        
        [System.ServiceModel.OperationContractAttribute(Action="ServerRPG.UserService/IUser/FindUserWithPassword", ReplyAction="ServerRPG.UserService/IUser/FindUserWithPasswordResponse")]
        WebRPG.MVC.UserServiceReference.User FindUserWithPassword(string searcher, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="ServerRPG.UserService/IUser/FindUserWithPassword", ReplyAction="ServerRPG.UserService/IUser/FindUserWithPasswordResponse")]
        System.Threading.Tasks.Task<WebRPG.MVC.UserServiceReference.User> FindUserWithPasswordAsync(string searcher, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="ServerRPG.UserService/IUser/Update", ReplyAction="ServerRPG.UserService/IUser/UpdateResponse")]
        int Update(WebRPG.MVC.UserServiceReference.User entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="ServerRPG.UserService/IUser/Update", ReplyAction="ServerRPG.UserService/IUser/UpdateResponse")]
        System.Threading.Tasks.Task<int> UpdateAsync(WebRPG.MVC.UserServiceReference.User entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="ServerRPG.UserService/IUser/Delete", ReplyAction="ServerRPG.UserService/IUser/DeleteResponse")]
        bool Delete(WebRPG.MVC.UserServiceReference.User entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="ServerRPG.UserService/IUser/Delete", ReplyAction="ServerRPG.UserService/IUser/DeleteResponse")]
        System.Threading.Tasks.Task<bool> DeleteAsync(WebRPG.MVC.UserServiceReference.User entity);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserChannel : WebRPG.MVC.UserServiceReference.IUser, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserClient : System.ServiceModel.ClientBase<WebRPG.MVC.UserServiceReference.IUser>, WebRPG.MVC.UserServiceReference.IUser {
        
        public UserClient() {
        }
        
        public UserClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void Create(WebRPG.MVC.UserServiceReference.User entity) {
            base.Channel.Create(entity);
        }
        
        public System.Threading.Tasks.Task CreateAsync(WebRPG.MVC.UserServiceReference.User entity) {
            return base.Channel.CreateAsync(entity);
        }
        
        public System.Collections.Generic.List<WebRPG.MVC.UserServiceReference.User> GetAll() {
            return base.Channel.GetAll();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WebRPG.MVC.UserServiceReference.User>> GetAllAsync() {
            return base.Channel.GetAllAsync();
        }
        
        public WebRPG.MVC.UserServiceReference.User Find(string searcher) {
            return base.Channel.Find(searcher);
        }
        
        public System.Threading.Tasks.Task<WebRPG.MVC.UserServiceReference.User> FindAsync(string searcher) {
            return base.Channel.FindAsync(searcher);
        }
        
        public WebRPG.MVC.UserServiceReference.User FindUserWithPassword(string searcher, string password) {
            return base.Channel.FindUserWithPassword(searcher, password);
        }
        
        public System.Threading.Tasks.Task<WebRPG.MVC.UserServiceReference.User> FindUserWithPasswordAsync(string searcher, string password) {
            return base.Channel.FindUserWithPasswordAsync(searcher, password);
        }
        
        public int Update(WebRPG.MVC.UserServiceReference.User entity) {
            return base.Channel.Update(entity);
        }
        
        public System.Threading.Tasks.Task<int> UpdateAsync(WebRPG.MVC.UserServiceReference.User entity) {
            return base.Channel.UpdateAsync(entity);
        }
        
        public bool Delete(WebRPG.MVC.UserServiceReference.User entity) {
            return base.Channel.Delete(entity);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAsync(WebRPG.MVC.UserServiceReference.User entity) {
            return base.Channel.DeleteAsync(entity);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="ServerRPG.AdventureService", ConfigurationName="UserServiceReference.IAdventure")]
    public interface IAdventure {
        
        [System.ServiceModel.OperationContractAttribute(Action="ServerRPG.AdventureService/IAdventure/Create", ReplyAction="ServerRPG.AdventureService/IAdventure/CreateResponse")]
        void Create(WebRPG.MVC.UserServiceReference.Adventure entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="ServerRPG.AdventureService/IAdventure/Create", ReplyAction="ServerRPG.AdventureService/IAdventure/CreateResponse")]
        System.Threading.Tasks.Task CreateAsync(WebRPG.MVC.UserServiceReference.Adventure entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="ServerRPG.AdventureService/IAdventure/Delete", ReplyAction="ServerRPG.AdventureService/IAdventure/DeleteResponse")]
        bool Delete(WebRPG.MVC.UserServiceReference.Adventure entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="ServerRPG.AdventureService/IAdventure/Delete", ReplyAction="ServerRPG.AdventureService/IAdventure/DeleteResponse")]
        System.Threading.Tasks.Task<bool> DeleteAsync(WebRPG.MVC.UserServiceReference.Adventure entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="ServerRPG.AdventureService/IAdventure/Find", ReplyAction="ServerRPG.AdventureService/IAdventure/FindResponse")]
        WebRPG.MVC.UserServiceReference.Adventure Find(string searcher);
        
        [System.ServiceModel.OperationContractAttribute(Action="ServerRPG.AdventureService/IAdventure/Find", ReplyAction="ServerRPG.AdventureService/IAdventure/FindResponse")]
        System.Threading.Tasks.Task<WebRPG.MVC.UserServiceReference.Adventure> FindAsync(string searcher);
        
        [System.ServiceModel.OperationContractAttribute(Action="ServerRPG.AdventureService/IAdventure/GetAll", ReplyAction="ServerRPG.AdventureService/IAdventure/GetAllResponse")]
        System.Collections.Generic.List<WebRPG.MVC.UserServiceReference.Adventure> GetAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="ServerRPG.AdventureService/IAdventure/GetAll", ReplyAction="ServerRPG.AdventureService/IAdventure/GetAllResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WebRPG.MVC.UserServiceReference.Adventure>> GetAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="ServerRPG.AdventureService/IAdventure/Update", ReplyAction="ServerRPG.AdventureService/IAdventure/UpdateResponse")]
        int Update(WebRPG.MVC.UserServiceReference.Adventure entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="ServerRPG.AdventureService/IAdventure/Update", ReplyAction="ServerRPG.AdventureService/IAdventure/UpdateResponse")]
        System.Threading.Tasks.Task<int> UpdateAsync(WebRPG.MVC.UserServiceReference.Adventure entity);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAdventureChannel : WebRPG.MVC.UserServiceReference.IAdventure, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AdventureClient : System.ServiceModel.ClientBase<WebRPG.MVC.UserServiceReference.IAdventure>, WebRPG.MVC.UserServiceReference.IAdventure {
        
        public AdventureClient() {
        }
        
        public AdventureClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AdventureClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AdventureClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AdventureClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void Create(WebRPG.MVC.UserServiceReference.Adventure entity) {
            base.Channel.Create(entity);
        }
        
        public System.Threading.Tasks.Task CreateAsync(WebRPG.MVC.UserServiceReference.Adventure entity) {
            return base.Channel.CreateAsync(entity);
        }
        
        public bool Delete(WebRPG.MVC.UserServiceReference.Adventure entity) {
            return base.Channel.Delete(entity);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAsync(WebRPG.MVC.UserServiceReference.Adventure entity) {
            return base.Channel.DeleteAsync(entity);
        }
        
        public WebRPG.MVC.UserServiceReference.Adventure Find(string searcher) {
            return base.Channel.Find(searcher);
        }
        
        public System.Threading.Tasks.Task<WebRPG.MVC.UserServiceReference.Adventure> FindAsync(string searcher) {
            return base.Channel.FindAsync(searcher);
        }
        
        public System.Collections.Generic.List<WebRPG.MVC.UserServiceReference.Adventure> GetAll() {
            return base.Channel.GetAll();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WebRPG.MVC.UserServiceReference.Adventure>> GetAllAsync() {
            return base.Channel.GetAllAsync();
        }
        
        public int Update(WebRPG.MVC.UserServiceReference.Adventure entity) {
            return base.Channel.Update(entity);
        }
        
        public System.Threading.Tasks.Task<int> UpdateAsync(WebRPG.MVC.UserServiceReference.Adventure entity) {
            return base.Channel.UpdateAsync(entity);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="ServerRPG.CharacterService", ConfigurationName="UserServiceReference.ICharacter")]
    public interface ICharacter {
        
        [System.ServiceModel.OperationContractAttribute(Action="ServerRPG.CharacterService/ICharacter/Create", ReplyAction="ServerRPG.CharacterService/ICharacter/CreateResponse")]
        void Create(WebRPG.MVC.UserServiceReference.Character entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="ServerRPG.CharacterService/ICharacter/Create", ReplyAction="ServerRPG.CharacterService/ICharacter/CreateResponse")]
        System.Threading.Tasks.Task CreateAsync(WebRPG.MVC.UserServiceReference.Character entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="ServerRPG.CharacterService/ICharacter/GetAll", ReplyAction="ServerRPG.CharacterService/ICharacter/GetAllResponse")]
        System.Collections.Generic.List<WebRPG.MVC.UserServiceReference.Character> GetAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="ServerRPG.CharacterService/ICharacter/GetAll", ReplyAction="ServerRPG.CharacterService/ICharacter/GetAllResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WebRPG.MVC.UserServiceReference.Character>> GetAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="ServerRPG.CharacterService/ICharacter/Find", ReplyAction="ServerRPG.CharacterService/ICharacter/FindResponse")]
        WebRPG.MVC.UserServiceReference.Character Find(string searcher);
        
        [System.ServiceModel.OperationContractAttribute(Action="ServerRPG.CharacterService/ICharacter/Find", ReplyAction="ServerRPG.CharacterService/ICharacter/FindResponse")]
        System.Threading.Tasks.Task<WebRPG.MVC.UserServiceReference.Character> FindAsync(string searcher);
        
        [System.ServiceModel.OperationContractAttribute(Action="ServerRPG.CharacterService/ICharacter/Update", ReplyAction="ServerRPG.CharacterService/ICharacter/UpdateResponse")]
        int Update(WebRPG.MVC.UserServiceReference.Character entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="ServerRPG.CharacterService/ICharacter/Update", ReplyAction="ServerRPG.CharacterService/ICharacter/UpdateResponse")]
        System.Threading.Tasks.Task<int> UpdateAsync(WebRPG.MVC.UserServiceReference.Character entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="ServerRPG.CharacterService/ICharacter/Delete", ReplyAction="ServerRPG.CharacterService/ICharacter/DeleteResponse")]
        bool Delete(WebRPG.MVC.UserServiceReference.Character entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="ServerRPG.CharacterService/ICharacter/Delete", ReplyAction="ServerRPG.CharacterService/ICharacter/DeleteResponse")]
        System.Threading.Tasks.Task<bool> DeleteAsync(WebRPG.MVC.UserServiceReference.Character entity);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICharacterChannel : WebRPG.MVC.UserServiceReference.ICharacter, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CharacterClient : System.ServiceModel.ClientBase<WebRPG.MVC.UserServiceReference.ICharacter>, WebRPG.MVC.UserServiceReference.ICharacter {
        
        public CharacterClient() {
        }
        
        public CharacterClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CharacterClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CharacterClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CharacterClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void Create(WebRPG.MVC.UserServiceReference.Character entity) {
            base.Channel.Create(entity);
        }
        
        public System.Threading.Tasks.Task CreateAsync(WebRPG.MVC.UserServiceReference.Character entity) {
            return base.Channel.CreateAsync(entity);
        }
        
        public System.Collections.Generic.List<WebRPG.MVC.UserServiceReference.Character> GetAll() {
            return base.Channel.GetAll();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WebRPG.MVC.UserServiceReference.Character>> GetAllAsync() {
            return base.Channel.GetAllAsync();
        }
        
        public WebRPG.MVC.UserServiceReference.Character Find(string searcher) {
            return base.Channel.Find(searcher);
        }
        
        public System.Threading.Tasks.Task<WebRPG.MVC.UserServiceReference.Character> FindAsync(string searcher) {
            return base.Channel.FindAsync(searcher);
        }
        
        public int Update(WebRPG.MVC.UserServiceReference.Character entity) {
            return base.Channel.Update(entity);
        }
        
        public System.Threading.Tasks.Task<int> UpdateAsync(WebRPG.MVC.UserServiceReference.Character entity) {
            return base.Channel.UpdateAsync(entity);
        }
        
        public bool Delete(WebRPG.MVC.UserServiceReference.Character entity) {
            return base.Channel.Delete(entity);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAsync(WebRPG.MVC.UserServiceReference.Character entity) {
            return base.Channel.DeleteAsync(entity);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="ServerRPG.RumorService", ConfigurationName="UserServiceReference.IRumor")]
    public interface IRumor {
        
        [System.ServiceModel.OperationContractAttribute(Action="ServerRPG.RumorService/IRumor/Create", ReplyAction="ServerRPG.RumorService/IRumor/CreateResponse")]
        void Create(WebRPG.MVC.UserServiceReference.Rumor entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="ServerRPG.RumorService/IRumor/Create", ReplyAction="ServerRPG.RumorService/IRumor/CreateResponse")]
        System.Threading.Tasks.Task CreateAsync(WebRPG.MVC.UserServiceReference.Rumor entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="ServerRPG.RumorService/IRumor/Delete", ReplyAction="ServerRPG.RumorService/IRumor/DeleteResponse")]
        bool Delete(WebRPG.MVC.UserServiceReference.Rumor entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="ServerRPG.RumorService/IRumor/Delete", ReplyAction="ServerRPG.RumorService/IRumor/DeleteResponse")]
        System.Threading.Tasks.Task<bool> DeleteAsync(WebRPG.MVC.UserServiceReference.Rumor entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="ServerRPG.RumorService/IRumor/Find", ReplyAction="ServerRPG.RumorService/IRumor/FindResponse")]
        WebRPG.MVC.UserServiceReference.Rumor Find(string searcher);
        
        [System.ServiceModel.OperationContractAttribute(Action="ServerRPG.RumorService/IRumor/Find", ReplyAction="ServerRPG.RumorService/IRumor/FindResponse")]
        System.Threading.Tasks.Task<WebRPG.MVC.UserServiceReference.Rumor> FindAsync(string searcher);
        
        [System.ServiceModel.OperationContractAttribute(Action="ServerRPG.RumorService/IRumor/GetAll", ReplyAction="ServerRPG.RumorService/IRumor/GetAllResponse")]
        System.Collections.Generic.List<WebRPG.MVC.UserServiceReference.Rumor> GetAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="ServerRPG.RumorService/IRumor/GetAll", ReplyAction="ServerRPG.RumorService/IRumor/GetAllResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WebRPG.MVC.UserServiceReference.Rumor>> GetAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="ServerRPG.RumorService/IRumor/Update", ReplyAction="ServerRPG.RumorService/IRumor/UpdateResponse")]
        int Update(WebRPG.MVC.UserServiceReference.Rumor entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="ServerRPG.RumorService/IRumor/Update", ReplyAction="ServerRPG.RumorService/IRumor/UpdateResponse")]
        System.Threading.Tasks.Task<int> UpdateAsync(WebRPG.MVC.UserServiceReference.Rumor entity);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRumorChannel : WebRPG.MVC.UserServiceReference.IRumor, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RumorClient : System.ServiceModel.ClientBase<WebRPG.MVC.UserServiceReference.IRumor>, WebRPG.MVC.UserServiceReference.IRumor {
        
        public RumorClient() {
        }
        
        public RumorClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RumorClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RumorClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RumorClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void Create(WebRPG.MVC.UserServiceReference.Rumor entity) {
            base.Channel.Create(entity);
        }
        
        public System.Threading.Tasks.Task CreateAsync(WebRPG.MVC.UserServiceReference.Rumor entity) {
            return base.Channel.CreateAsync(entity);
        }
        
        public bool Delete(WebRPG.MVC.UserServiceReference.Rumor entity) {
            return base.Channel.Delete(entity);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAsync(WebRPG.MVC.UserServiceReference.Rumor entity) {
            return base.Channel.DeleteAsync(entity);
        }
        
        public WebRPG.MVC.UserServiceReference.Rumor Find(string searcher) {
            return base.Channel.Find(searcher);
        }
        
        public System.Threading.Tasks.Task<WebRPG.MVC.UserServiceReference.Rumor> FindAsync(string searcher) {
            return base.Channel.FindAsync(searcher);
        }
        
        public System.Collections.Generic.List<WebRPG.MVC.UserServiceReference.Rumor> GetAll() {
            return base.Channel.GetAll();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WebRPG.MVC.UserServiceReference.Rumor>> GetAllAsync() {
            return base.Channel.GetAllAsync();
        }
        
        public int Update(WebRPG.MVC.UserServiceReference.Rumor entity) {
            return base.Channel.Update(entity);
        }
        
        public System.Threading.Tasks.Task<int> UpdateAsync(WebRPG.MVC.UserServiceReference.Rumor entity) {
            return base.Channel.UpdateAsync(entity);
        }
    }
}
