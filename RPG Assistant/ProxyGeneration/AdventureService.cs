//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServerRPG.Model
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Adventure", Namespace="http://schemas.datacontract.org/2004/07/ServerRPG.Model")]
    public partial class Adventure : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private bool ActiveField;
        
        private System.DateTime DateField;
        
        private string LogbookField;
        
        private string NameField;
        
        private System.Collections.Generic.List<ServerRPG.Model.User> PlayersField;
        
        private ServerRPG.Model.Rumor RumorField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active
        {
            get
            {
                return this.ActiveField;
            }
            set
            {
                this.ActiveField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date
        {
            get
            {
                return this.DateField;
            }
            set
            {
                this.DateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Logbook
        {
            get
            {
                return this.LogbookField;
            }
            set
            {
                this.LogbookField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<ServerRPG.Model.User> Players
        {
            get
            {
                return this.PlayersField;
            }
            set
            {
                this.PlayersField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServerRPG.Model.Rumor Rumor
        {
            get
            {
                return this.RumorField;
            }
            set
            {
                this.RumorField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Rumor", Namespace="http://schemas.datacontract.org/2004/07/ServerRPG.Model")]
    public partial class Rumor : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private bool ActiveField;
        
        private System.DateTime DateField;
        
        private string DescriptionField;
        
        private string NameField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active
        {
            get
            {
                return this.ActiveField;
            }
            set
            {
                this.ActiveField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date
        {
            get
            {
                return this.DateField;
            }
            set
            {
                this.DateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this.DescriptionField;
            }
            set
            {
                this.DescriptionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/ServerRPG.Model")]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private bool ActiveField;
        
        private System.Collections.Generic.List<ServerRPG.Model.Adventure> AdventuresField;
        
        private string HashedPasswordField;
        
        private bool IsGameMasterField;
        
        private string SaltField;
        
        private string UserNameField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active
        {
            get
            {
                return this.ActiveField;
            }
            set
            {
                this.ActiveField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<ServerRPG.Model.Adventure> Adventures
        {
            get
            {
                return this.AdventuresField;
            }
            set
            {
                this.AdventuresField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HashedPassword
        {
            get
            {
                return this.HashedPasswordField;
            }
            set
            {
                this.HashedPasswordField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsGameMaster
        {
            get
            {
                return this.IsGameMasterField;
            }
            set
            {
                this.IsGameMasterField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Salt
        {
            get
            {
                return this.SaltField;
            }
            set
            {
                this.SaltField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName
        {
            get
            {
                return this.UserNameField;
            }
            set
            {
                this.UserNameField = value;
            }
        }
    }
}


[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName="IAdventure")]
public interface IAdventure
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdventure/Create", ReplyAction="http://tempuri.org/IAdventure/CreateResponse")]
    void Create(ServerRPG.Model.Adventure entity);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdventure/Create", ReplyAction="http://tempuri.org/IAdventure/CreateResponse")]
    System.Threading.Tasks.Task CreateAsync(ServerRPG.Model.Adventure entity);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdventure/Delete", ReplyAction="http://tempuri.org/IAdventure/DeleteResponse")]
    bool Delete(ServerRPG.Model.Adventure entity);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdventure/Delete", ReplyAction="http://tempuri.org/IAdventure/DeleteResponse")]
    System.Threading.Tasks.Task<bool> DeleteAsync(ServerRPG.Model.Adventure entity);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdventure/Find", ReplyAction="http://tempuri.org/IAdventure/FindResponse")]
    ServerRPG.Model.Adventure Find(string searcher);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdventure/Find", ReplyAction="http://tempuri.org/IAdventure/FindResponse")]
    System.Threading.Tasks.Task<ServerRPG.Model.Adventure> FindAsync(string searcher);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdventure/GetAll", ReplyAction="http://tempuri.org/IAdventure/GetAllResponse")]
    System.Collections.Generic.List<ServerRPG.Model.Adventure> GetAll();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdventure/GetAll", ReplyAction="http://tempuri.org/IAdventure/GetAllResponse")]
    System.Threading.Tasks.Task<System.Collections.Generic.List<ServerRPG.Model.Adventure>> GetAllAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdventure/Update", ReplyAction="http://tempuri.org/IAdventure/UpdateResponse")]
    int Update(ServerRPG.Model.Adventure entity);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdventure/Update", ReplyAction="http://tempuri.org/IAdventure/UpdateResponse")]
    System.Threading.Tasks.Task<int> UpdateAsync(ServerRPG.Model.Adventure entity);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IAdventureChannel : IAdventure, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class AdventureClient : System.ServiceModel.ClientBase<IAdventure>, IAdventure
{
    
    public AdventureClient()
    {
    }
    
    public AdventureClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public AdventureClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public AdventureClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public AdventureClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public void Create(ServerRPG.Model.Adventure entity)
    {
        base.Channel.Create(entity);
    }
    
    public System.Threading.Tasks.Task CreateAsync(ServerRPG.Model.Adventure entity)
    {
        return base.Channel.CreateAsync(entity);
    }
    
    public bool Delete(ServerRPG.Model.Adventure entity)
    {
        return base.Channel.Delete(entity);
    }
    
    public System.Threading.Tasks.Task<bool> DeleteAsync(ServerRPG.Model.Adventure entity)
    {
        return base.Channel.DeleteAsync(entity);
    }
    
    public ServerRPG.Model.Adventure Find(string searcher)
    {
        return base.Channel.Find(searcher);
    }
    
    public System.Threading.Tasks.Task<ServerRPG.Model.Adventure> FindAsync(string searcher)
    {
        return base.Channel.FindAsync(searcher);
    }
    
    public System.Collections.Generic.List<ServerRPG.Model.Adventure> GetAll()
    {
        return base.Channel.GetAll();
    }
    
    public System.Threading.Tasks.Task<System.Collections.Generic.List<ServerRPG.Model.Adventure>> GetAllAsync()
    {
        return base.Channel.GetAllAsync();
    }
    
    public int Update(ServerRPG.Model.Adventure entity)
    {
        return base.Channel.Update(entity);
    }
    
    public System.Threading.Tasks.Task<int> UpdateAsync(ServerRPG.Model.Adventure entity)
    {
        return base.Channel.UpdateAsync(entity);
    }
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName="IUser")]
public interface IUser
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/Create", ReplyAction="http://tempuri.org/IUser/CreateResponse")]
    void Create(ServerRPG.Model.Adventure entity);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/Create", ReplyAction="http://tempuri.org/IUser/CreateResponse")]
    System.Threading.Tasks.Task CreateAsync(ServerRPG.Model.Adventure entity);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/GetAll", ReplyAction="http://tempuri.org/IUser/GetAllResponse")]
    System.Collections.Generic.List<ServerRPG.Model.Adventure> GetAll();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/GetAll", ReplyAction="http://tempuri.org/IUser/GetAllResponse")]
    System.Threading.Tasks.Task<System.Collections.Generic.List<ServerRPG.Model.Adventure>> GetAllAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/Find", ReplyAction="http://tempuri.org/IUser/FindResponse")]
    ServerRPG.Model.Adventure Find(string searcher);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/Find", ReplyAction="http://tempuri.org/IUser/FindResponse")]
    System.Threading.Tasks.Task<ServerRPG.Model.Adventure> FindAsync(string searcher);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/Update", ReplyAction="http://tempuri.org/IUser/UpdateResponse")]
    int Update(ServerRPG.Model.Adventure entity);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/Update", ReplyAction="http://tempuri.org/IUser/UpdateResponse")]
    System.Threading.Tasks.Task<int> UpdateAsync(ServerRPG.Model.Adventure entity);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/Delete", ReplyAction="http://tempuri.org/IUser/DeleteResponse")]
    bool Delete(ServerRPG.Model.Adventure entity);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/Delete", ReplyAction="http://tempuri.org/IUser/DeleteResponse")]
    System.Threading.Tasks.Task<bool> DeleteAsync(ServerRPG.Model.Adventure entity);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IUserChannel : IUser, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class UserClient : System.ServiceModel.ClientBase<IUser>, IUser
{
    
    public UserClient()
    {
    }
    
    public UserClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public UserClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public UserClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public UserClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public void Create(ServerRPG.Model.Adventure entity)
    {
        base.Channel.Create(entity);
    }
    
    public System.Threading.Tasks.Task CreateAsync(ServerRPG.Model.Adventure entity)
    {
        return base.Channel.CreateAsync(entity);
    }
    
    public System.Collections.Generic.List<ServerRPG.Model.Adventure> GetAll()
    {
        return base.Channel.GetAll();
    }
    
    public System.Threading.Tasks.Task<System.Collections.Generic.List<ServerRPG.Model.Adventure>> GetAllAsync()
    {
        return base.Channel.GetAllAsync();
    }
    
    public ServerRPG.Model.Adventure Find(string searcher)
    {
        return base.Channel.Find(searcher);
    }
    
    public System.Threading.Tasks.Task<ServerRPG.Model.Adventure> FindAsync(string searcher)
    {
        return base.Channel.FindAsync(searcher);
    }
    
    public int Update(ServerRPG.Model.Adventure entity)
    {
        return base.Channel.Update(entity);
    }
    
    public System.Threading.Tasks.Task<int> UpdateAsync(ServerRPG.Model.Adventure entity)
    {
        return base.Channel.UpdateAsync(entity);
    }
    
    public bool Delete(ServerRPG.Model.Adventure entity)
    {
        return base.Channel.Delete(entity);
    }
    
    public System.Threading.Tasks.Task<bool> DeleteAsync(ServerRPG.Model.Adventure entity)
    {
        return base.Channel.DeleteAsync(entity);
    }
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName="ICharacter")]
public interface ICharacter
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICharacter/Create", ReplyAction="http://tempuri.org/ICharacter/CreateResponse")]
    void Create(ServerRPG.Model.Adventure entity);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICharacter/Create", ReplyAction="http://tempuri.org/ICharacter/CreateResponse")]
    System.Threading.Tasks.Task CreateAsync(ServerRPG.Model.Adventure entity);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICharacter/GetAll", ReplyAction="http://tempuri.org/ICharacter/GetAllResponse")]
    System.Collections.Generic.List<ServerRPG.Model.Adventure> GetAll();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICharacter/GetAll", ReplyAction="http://tempuri.org/ICharacter/GetAllResponse")]
    System.Threading.Tasks.Task<System.Collections.Generic.List<ServerRPG.Model.Adventure>> GetAllAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICharacter/Find", ReplyAction="http://tempuri.org/ICharacter/FindResponse")]
    ServerRPG.Model.Adventure Find(string searcher);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICharacter/Find", ReplyAction="http://tempuri.org/ICharacter/FindResponse")]
    System.Threading.Tasks.Task<ServerRPG.Model.Adventure> FindAsync(string searcher);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICharacter/Update", ReplyAction="http://tempuri.org/ICharacter/UpdateResponse")]
    int Update(ServerRPG.Model.Adventure entity);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICharacter/Update", ReplyAction="http://tempuri.org/ICharacter/UpdateResponse")]
    System.Threading.Tasks.Task<int> UpdateAsync(ServerRPG.Model.Adventure entity);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICharacter/Delete", ReplyAction="http://tempuri.org/ICharacter/DeleteResponse")]
    bool Delete(ServerRPG.Model.Adventure entity);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICharacter/Delete", ReplyAction="http://tempuri.org/ICharacter/DeleteResponse")]
    System.Threading.Tasks.Task<bool> DeleteAsync(ServerRPG.Model.Adventure entity);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface ICharacterChannel : ICharacter, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class CharacterClient : System.ServiceModel.ClientBase<ICharacter>, ICharacter
{
    
    public CharacterClient()
    {
    }
    
    public CharacterClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public CharacterClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public CharacterClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public CharacterClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public void Create(ServerRPG.Model.Adventure entity)
    {
        base.Channel.Create(entity);
    }
    
    public System.Threading.Tasks.Task CreateAsync(ServerRPG.Model.Adventure entity)
    {
        return base.Channel.CreateAsync(entity);
    }
    
    public System.Collections.Generic.List<ServerRPG.Model.Adventure> GetAll()
    {
        return base.Channel.GetAll();
    }
    
    public System.Threading.Tasks.Task<System.Collections.Generic.List<ServerRPG.Model.Adventure>> GetAllAsync()
    {
        return base.Channel.GetAllAsync();
    }
    
    public ServerRPG.Model.Adventure Find(string searcher)
    {
        return base.Channel.Find(searcher);
    }
    
    public System.Threading.Tasks.Task<ServerRPG.Model.Adventure> FindAsync(string searcher)
    {
        return base.Channel.FindAsync(searcher);
    }
    
    public int Update(ServerRPG.Model.Adventure entity)
    {
        return base.Channel.Update(entity);
    }
    
    public System.Threading.Tasks.Task<int> UpdateAsync(ServerRPG.Model.Adventure entity)
    {
        return base.Channel.UpdateAsync(entity);
    }
    
    public bool Delete(ServerRPG.Model.Adventure entity)
    {
        return base.Channel.Delete(entity);
    }
    
    public System.Threading.Tasks.Task<bool> DeleteAsync(ServerRPG.Model.Adventure entity)
    {
        return base.Channel.DeleteAsync(entity);
    }
}
